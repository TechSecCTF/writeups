
# This file was *autogenerated* from the file exploit.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4)
import binascii

data = open('data.txt', 'r')
y = data.read().split()

y = [Integer(a) for a in y]
z = [(y[_sage_const_4 *i + _sage_const_0 ], y[_sage_const_4 *i + _sage_const_1 ], y[_sage_const_4 *i + _sage_const_2 ], y[_sage_const_4 *i + _sage_const_3 ]) for i in range(_sage_const_5 )]

ns = [a[_sage_const_3 ] for a in z]
cs = [a[_sage_const_2 ] for a in z]
bs = [a[_sage_const_1 ] for a in z]
ass = [a[_sage_const_0 ] for a in z]

ts = [crt([int(i == j) for j in range(_sage_const_5 )], ns) for i in range(_sage_const_5 )]

P = PolynomialRing(Zmod(prod(ns)), names=('x',)); (x,) = P._first_ngens(1)
gs = [(ts[i] * ((ass[i] * x + bs[i])**_sage_const_5  - cs[i])) for i in range(_sage_const_5 )]
g = sum(gs)
g = g.monic()
roots = g.small_roots()

print binascii.unhexlify(hex(int(roots[_sage_const_0 ]))[_sage_const_2 :-_sage_const_1 ])

