seg000:7C00 ;
seg000:7C00 ; +-------------------------------------------------------------------------+
seg000:7C00 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
seg000:7C00 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
seg000:7C00 ; |                      License info: 48-B611-7234-BB                      |
seg000:7C00 ; |             Doskey Lee, Kingsoft Internet Security Software             |
seg000:7C00 ; +-------------------------------------------------------------------------+
seg000:7C00 ;
seg000:7C00 ; Input MD5   : 962002CA65D91D9C099C7862795B1827
seg000:7C00 ; Input CRC32 : 82FCD604
seg000:7C00
seg000:7C00 ; ---------------------------------------------------------------------------
seg000:7C00 ; File Name   : Z:\raywang\Dropbox (MIT)\CTFs\CSAW2017\realism
seg000:7C00 ; Format      : Binary file
seg000:7C00 ; Base Address: 0000h Range: 7C00h - 7E00h Loaded length: 0200h
seg000:7C00
seg000:7C00                 .686p
seg000:7C00                 .mmx
seg000:7C00                 .model flat
seg000:7C00
seg000:7C00 ; ===========================================================================
seg000:7C00
seg000:7C00 ; Segment type: Pure code
seg000:7C00 seg000          segment byte public 'CODE' use16
seg000:7C00                 assume cs:seg000
seg000:7C00                 ;org 7C00h
seg000:7C00                 assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
seg000:7C00
seg000:7C00 loc_7C00:                               ; DATA XREF: seg000:7C81r
seg000:7C00                 mov     ax, 13h
seg000:7C03                 int     10h             ; - VIDEO - SET VIDEO MODE
seg000:7C03                                         ; AL = mode
seg000:7C05                 mov     eax, cr0
seg000:7C08                 and     ax, 0FFFBh
seg000:7C0B                 or      ax, 2
seg000:7C0E                 mov     cr0, eax
seg000:7C11                 mov     eax, cr4
seg000:7C14                 or      ax, 600h
seg000:7C17                 mov     cr4, eax
seg000:7C1A                 mov     word ptr ds:1266h, 0Ah
seg000:7C20                 mov     bx, 0
seg000:7C23
seg000:7C23 loc_7C23:                               ; CODE XREF: seg000:7C2Cj
seg000:7C23                 mov     byte ptr [bx+1234h], 5Fh
seg000:7C28                 inc     bx
seg000:7C29                 cmp     bx, 15h
seg000:7C2C                 jle     short loc_7C23
seg000:7C2E                 mov     ds:byte_7DC8, 0
seg000:7C33
seg000:7C33 loc_7C33:                               ; CODE XREF: seg000:7CF3j
seg000:7C33                                         ; seg000:7D0Aj ...
seg000:7C33                 mov     cx, 1
seg000:7C36                 xor     dx, dx
seg000:7C38
seg000:7C38 loc_7C38:                               ; CODE XREF: seg000:7CDCj
seg000:7C38                 mov     ah, 86h
seg000:7C3A                 int     15h             ; SYSTEM - WAIT (AT,XT2,XT286,CONV,PS)
seg000:7C3A                                         ; CX,DX = number of microseconds to wait
seg000:7C3A                                         ; Return: CF clear: after wait elapses, CF set: immediately due to error
seg000:7C3C
seg000:7C3C loc_7C3C:                               ; DATA XREF: seg000:loc_7CDFw
seg000:7C3C                 add     byte ptr ds:1278h, 10h
seg000:7C41                 mov     ax, 1300h
seg000:7C44                 mov     bh, 0
seg000:7C46                 mov     bl, ds:1278h
seg000:7C4A                 mov     cx, 10h
seg000:7C4D                 mov     dx, 90Ch
seg000:7C50                 mov     bp, 7D60h       ; Enter flag
seg000:7C53                 int     10h             ; - VIDEO - WRITE STRING (AT,XT286,PS,EGA,VGA)
seg000:7C53                                         ; AL = mode, BL = attribute if AL bit 1 clear, BH = display page number
seg000:7C53                                         ; DH,DL = row,column of starting cursor position, CX = length of string
seg000:7C53                                         ; ES:BP -> start of string
seg000:7C55                 mov     ax, 1300h
seg000:7C58                 mov     bx, 0Fh
seg000:7C5B                 mov     cx, 14h
seg000:7C5E                 mov     dx, 0C0Ah
seg000:7C61                 mov     bp, 1234h
seg000:7C64                 int     10h             ; - VIDEO - WRITE STRING (AT,XT286,PS,EGA,VGA)
seg000:7C64                                         ; AL = mode, BL = attribute if AL bit 1 clear, BH = display page number
seg000:7C64                                         ; DH,DL = row,column of starting cursor position, CX = length of string
seg000:7C64                                         ; ES:BP -> start of string
seg000:7C66                 cmp     ds:byte_7DC8, 13h
seg000:7C6B                 jle     loc_7D0D
seg000:7C6F                 cmp     dword ptr ds:1234h, 67616C66h
seg000:7C78                 jnz     loc_7D4D
seg000:7C7C                 movaps  xmm0, xmmword ptr ds:1238h
seg000:7C81                 movaps  xmm5, xmmword ptr ds:loc_7C00
seg000:7C86                 pshufd  xmm0, xmm0, 1Eh
seg000:7C8B                 mov     si, 8
seg000:7C8E
seg000:7C8E loc_7C8E:                               ; CODE XREF: seg000:7CC1j
seg000:7C8E                 movaps  xmm2, xmm0
seg000:7C91                 andps   xmm2, xmmword ptr [si+7D90h]
seg000:7C96                 psadbw  xmm5, xmm2
seg000:7C9A                 movaps  xmmword ptr ds:1268h, xmm5
seg000:7C9F                 mov     di, ds:1268h
seg000:7CA3                 shl     edi, 10h
seg000:7CA7                 mov     di, ds:1270h
seg000:7CAB                 mov     dx, si
seg000:7CAD                 dec     dx
seg000:7CAE                 add     dx, dx
seg000:7CB0                 add     dx, dx
seg000:7CB2                 cmp     edi, [edx+7DA8h]
seg000:7CBA                 jnz     loc_7D4D
seg000:7CBE                 dec     si
seg000:7CBF                 test    si, si
seg000:7CC1                 jnz     short loc_7C8E
seg000:7CC3                 mov     byte ptr ds:1278h, 0Ah
seg000:7CC8                 mov     bx, ds:1266h
seg000:7CCC                 mov     di, 7D70h       ; Correct!
seg000:7CCF                 test    bx, bx
seg000:7CD1                 jz      short loc_7CDF
seg000:7CD3                 dec     word ptr ds:1266h
seg000:7CD7                 xor     cx, cx
seg000:7CD9                 mov     dx, 14h
seg000:7CDC                 jmp     loc_7C38
seg000:7CDF ; ---------------------------------------------------------------------------
seg000:7CDF
seg000:7CDF loc_7CDF:                               ; CODE XREF: seg000:7CD1j
seg000:7CDF                                         ; seg000:7D55j
seg000:7CDF                 mov     byte ptr ds:loc_7C3C+1, 0
seg000:7CE4                 mov     word ptr ds:1266h, 0Ah
seg000:7CEA                 xor     bh, bh
seg000:7CEC                 mov     bl, ds:byte_7DC9
seg000:7CF0                 cmp     bx, 10h
seg000:7CF3                 jge     loc_7C33
seg000:7CF7                 mov     cl, [bx+di]
seg000:7CF9                 mov     [bx+7D60h], cl
seg000:7CFD                 inc     ds:byte_7DC9
seg000:7D01                 mov     dword ptr [bx+7D61h], 3E3D3D20h
seg000:7D0A                 jmp     loc_7C33
seg000:7D0D ; ---------------------------------------------------------------------------
seg000:7D0D
seg000:7D0D loc_7D0D:                               ; CODE XREF: seg000:7C6Bj
seg000:7D0D                 mov     ah, 1
seg000:7D0F                 int     16h             ; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
seg000:7D0F                                         ; Return: ZF clear if character in buffer
seg000:7D0F                                         ; AH = scan code, AL = character
seg000:7D0F                                         ; ZF set if no character in buffer
seg000:7D11                 jz      short loc_7D4A
seg000:7D13                 xor     ah, ah
seg000:7D15                 int     16h             ; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
seg000:7D15                                         ; Return: AH = scan code, AL = character
seg000:7D17                 cmp     al, 8
seg000:7D19                 jz      short loc_7D31
seg000:7D1B                 cmp     al, 0Dh
seg000:7D1D                 jz      short loc_7D4A
seg000:7D1F                 mov     bx, 1234h
seg000:7D22                 mov     cl, ds:byte_7DC8
seg000:7D26                 add     bx, cx
seg000:7D28                 mov     [bx], al
seg000:7D2A                 inc     ds:byte_7DC8
seg000:7D2E                 jmp     loc_7C33
seg000:7D31 ; ---------------------------------------------------------------------------
seg000:7D31
seg000:7D31 loc_7D31:                               ; CODE XREF: seg000:7D19j
seg000:7D31                 cmp     ds:byte_7DC8, 1
seg000:7D36                 jl      loc_7C33
seg000:7D3A                 mov     ax, 1234h
seg000:7D3D                 dec     ds:byte_7DC8
seg000:7D41                 mov     bl, ds:byte_7DC8
seg000:7D45                 add     bx, ax
seg000:7D47                 mov     byte ptr [bx], 5Fh
seg000:7D4A
seg000:7D4A loc_7D4A:                               ; CODE XREF: seg000:7D11j
seg000:7D4A                                         ; seg000:7D1Dj
seg000:7D4A                 jmp     loc_7C33
seg000:7D4D ; ---------------------------------------------------------------------------
seg000:7D4D
seg000:7D4D loc_7D4D:                               ; CODE XREF: seg000:7C78j
seg000:7D4D                                         ; seg000:7CBAj
seg000:7D4D                 mov     byte ptr ds:1278h, 4
seg000:7D52                 mov     di, 7D80h       ; wrong flag!
seg000:7D55                 jmp     short loc_7CDF
seg000:7D55 ; ---------------------------------------------------------------------------
seg000:7D57                 align 10h
seg000:7D60                 db  3Dh ; =
seg000:7D61                 db  3Dh ; =
seg000:7D62                 db  20h
seg000:7D63                 db 45h, 4Eh, 54h, 45h, 52h, 20h, 46h, 4Ch, 41h, 47h, 20h
seg000:7D63                 db 2 dup(3Dh), 3 dup(0AFh), 20h, 43h, 4Fh, 2 dup(52h)
seg000:7D63                 db 45h, 43h, 54h, 21h, 20h, 3 dup(0AEh), 2 dup(21h), 20h
seg000:7D63                 db 57h, 52h, 4Fh, 4Eh, 47h, 20h, 46h, 4Ch, 41h, 47h, 20h
seg000:7D63                 db 2 dup(21h), 8 dup(0FFh), 0, 7 dup(0FFh), 0, 7 dup(0FFh)
seg000:7D63                 db 70h, 2, 11h, 2, 55h, 2, 29h, 2, 91h, 2, 5Eh, 2, 33h
seg000:7D63                 db 2, 0F9h, 1, 78h, 2, 7Bh, 2, 21h, 2, 9, 2, 5Dh, 2, 90h
seg000:7D63                 db 2, 8Fh, 2, 0DFh, 2
seg000:7DC8 byte_7DC8       db 0                    ; DATA XREF: seg000:7C2Ew
seg000:7DC8                                         ; seg000:7C66r ...
seg000:7DC9 byte_7DC9       db 0                    ; DATA XREF: seg000:7CECr
seg000:7DC9                                         ; seg000:7CFDw
seg000:7DCA                 db 34h dup(0), 55h, 0AAh
seg000:7DCA seg000          ends
seg000:7DCA
seg000:7DCA
seg000:7DCA                 end
